@testset "Heisenberg Model" begin
    HeisenbergSpin = MonteCarlo.HeisenbergSpin

    # constructors
    m = HeisenbergModel(L=8,dims=2);
    @test m.L == 8 && m.dims == 2
    @test ndims(m) == 2
    @test MonteCarlo.nsites(m) == 64
    @test typeof(m) == MonteCarlo.HeisenbergModel{MonteCarlo.SquareLattice}
    m = HeisenbergModel(dims=1, L=10);
    @test typeof(m) == MonteCarlo.HeisenbergModel{MonteCarlo.Chain}
    @test m.L == 10 && m.dims == 1
    @test MonteCarlo.nsites(m) == 10
    @test ndims(m) == 1
    d = Dict(:dims=>3, :L=>3)
    m = HeisenbergModel(d)
    @test typeof(m) == MonteCarlo.HeisenbergModel{MonteCarlo.CubicLattice{Array{Int64,3}}}
    @test m.L == 3 && m.dims == 3

    # energy, general
    @test MonteCarlo.energy(
        MC(m, beta=1),
        m,
        reshape([HeisenbergSpin(1.0, 0.0, 0.0) for _ in 1:3^3], (3,3,3))
    ) == -45.0
    # energy, square lattice
    m = HeisenbergModel(dims=2, L=8)
    mc = MC(m, beta=1)
    conf = reshape([HeisenbergSpin(1.0, 0.0, 0.0) for _ in 1:64], (8,8))
    conff = deepcopy(conf)
    @test MonteCarlo.energy(mc, m, conf) == -128.0

    # rand, conftype
    Random.seed!(123)
    @test MonteCarlo.rand(MC, m) == StaticArrays.SArray{Tuple{3},Float64,1,3}[[0.054709808627692105, -0.4698861281411874, 0.881030001430374] [-0.16059076580435466, 0.9812189966410111, -0.10686386933467373] [-0.3698397594494452, 0.46931484692972636, 0.8018491920440551] [0.9402733370527674, -0.3272399759088862, 0.09380858060329222] [0.8492737377382399, -0.4329624046023341, -0.3021219531730259] [0.7398500212289193, -0.4335210506402406, 0.5144720057878267] [-0.24617467661144288, -0.9556635437413262, -0.16157109815502801] [0.7809361875707347, 0.43474379325991386, -0.44848244688556926]; [-0.44964650849272214, -0.8683880529571113, -0.2090937753297828] [-0.758655943575365, -0.4315792647490655, -0.48803739356367837] [-0.34518565705763865, -0.06417080337909961, -0.9363380640320926] [0.44978173846708364, 0.43638663449264936, -0.7792708726609168] [0.15335078184896345, -0.6979356067740998, 0.6995494453597835] [-0.8177047696494727, -0.5110133438324568, -0.2649986266335618] [0.7847787285132863, 0.5599675403550868, -0.26562887836555715] [0.9865941792284774, -0.1474897326394415, -0.06984772207046674]; [-0.3659746882914676, 0.8719898245362905, 0.3251096329473069] [-0.24897501219074936, -0.8745966369538137, -0.4160434663994801] [0.38455246956944694, -0.27688573036876174, 0.8805984842515895] [-0.9624767291590164, -0.08902802751051347, 0.2563446042828845] [0.5058799024155118, 0.4746305414672348, 0.7202856193473473] [0.08968109053010705, -0.6391772050310897, 0.7638126750519234] [0.45027521834642065, 0.8540368930448085, -0.2605248799279134] [-0.5579268330582496, 0.30298998945963657, -0.7726025596908421]; [-0.3812168635318882, -0.22876819889498823, -0.8957336736626869] [-0.15718375436038817, 0.7950213305181353, 0.5858620583263154] [-0.6888723216002229, -0.6582164445665419, -0.30365446915087446] [0.8894451594105448, 0.18988825573881774, 0.41572798646906106] [-0.6777418132526164, -0.3550791000642628, -0.6438826502295343] [-0.41164803637054037, -0.6484374484192001, 0.640370806361342] [0.27054131746016924, -0.03148640203699849, 0.9621933288241404] [-0.3190087625918466, -0.9320012278340791, -0.17206719822612282]; [-0.07279111980957277, 0.6186865644117363, -0.7822585173031169] [0.1389051016474092, 0.5303367472465012, 0.8363302620713444] [-0.7279024925847868, -0.34595659256551997, -0.5920067544794647] [-0.2949057861844057, 0.8774484418483306, -0.3783051799445709] [0.6247056978436045, -0.1946923653014633, 0.7561994935035705] [0.8252386805097376, -0.33981314714021477, -0.45111877063719064] [0.945670800926942, -0.22845673799891908, 0.2313314832379918] [-0.4579952588649108, -0.6417839787155921, -0.6151045988457962]; [0.5154866753895428, 0.855196538019954, -0.05396636780923503] [-0.5995279312746796, -0.5235862783448562, 0.6053293886393472] [-0.6041229437096394, 0.6042727436591867, 0.5195093070910266] [-0.9640782264240825, 0.257399863837926, -0.06556282049464235] [0.979808220589479, 0.056492830324060855, 0.19179262495532923] [0.20028938953841044, -0.9382326443407051, 0.2821412155849954] [0.8301057639868864, -0.08112715752290196, 0.5516727335187066] [-0.09304159525683474, -0.23290326525606878, -0.9680389096441964]; [0.6446805852025134, -0.7274404223689908, 0.2349837759645741] [-0.44348011414361693, -0.16176943243206343, 0.8815645405129295] [0.3031260794623224, 0.791357276642592, -0.5309126487988602] [-0.5009709610761276, 0.6634638433005149, 0.5557371903979171] [0.6997795870779941, -0.20640341472631402, 0.6838904589905237] [-0.1321201740154752, 0.44508956766066826, 0.8856859129385315] [0.09015750860320666, -0.9306780670829341, -0.3545560027601229] [0.9692102996711123, 0.10909482700455325, 0.22074807752793557]; [-0.22183838184032256, 0.9723989073115168, -0.07230558347621052] [-0.8079088277415891, 0.10206348170432358, 0.580401905372133] [0.7906841032655655, 0.5569633109316319, 0.2541859931609194] [0.38825219717257975, 0.3653058927241, -0.8460566388438262] [-0.20072350823052057, 0.6734557322891896, 0.711454460869045] [0.38522761510183173, 0.6430468683718503, 0.6618839850306935] [0.7912646188399449, 0.37029406988066393, -0.48660312862053257] [-0.7821304156985803, -0.1053588457448013, 0.6141429202249986]]
    # propose, accept
    @test MonteCarlo.propose_local(mc, m, 13, conff) == (6.796574379545481, [-0.6991435948863703, 0.6586231468854424, 0.27823332675306833])
    @test conf == conff
    @test MonteCarlo.accept_local!(mc, m, 13, conff, 2, 1352.0) == nothing
    conff[13] = [-0.6991435948863703, 0.6586231468854424, 0.27823332675306833]
    @test conf == conff

    # TODO move this
    Random.seed!()
    model = MonteCarlo.HeisenbergModel(dims=3, L=8)

    # Low T
    mc = MC(model, T = 0.1, thermalization = 50_000, sweeps = 150_000)
    run!(mc, verbose=false)
    @test mean(mc.measurements[:Energy].C) ≈ 1.0 atol=0.02

    # critical T (guessed)
    mc = MC(model, T = 1.4, thermalization = 50_000, sweeps = 150_000)
    run!(mc, verbose=false)
    @test mean(mc.measurements[:Energy].C) ≈ 2.4 atol=0.1

    # high T (guessed)
    mc = MC(model, T = 2.0, thermalization = 50_000, sweeps = 150_000)
    run!(mc, verbose=false)
    @test mean(mc.measurements[:Energy].C) ≈ 0.36 atol=0.05
end
